{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Korisnik\\\\Desktop\\\\myquiz\\\\src\\\\components\\\\quiz\\\\Med.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport M from \"materialize-css\";\nimport questions from \"../../questionmed.json\";\nimport isEmpty from \"../../utils/is-empty\";\nimport classnames from \"classnames\";\nimport { imageListClasses } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MedPlay extends Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n\n    this.displayQuestions = function () {\n      let questions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.questions;\n      let currentQuestion = arguments.length > 1 ? arguments[1] : undefined;\n      let nextQuestion = arguments.length > 2 ? arguments[2] : undefined;\n      let previousQuestion = arguments.length > 3 ? arguments[3] : undefined;\n      let {\n        currentQuestionIndex\n      } = _this.state;\n\n      if (!isEmpty(_this.state.questions)) {\n        questions = _this.state.questions;\n        currentQuestion = questions[currentQuestionIndex];\n        nextQuestion = questions[currentQuestionIndex + 1];\n        previousQuestion = questions[currentQuestionIndex - 1];\n        const answer = currentQuestion.answer;\n\n        _this.setState({\n          currentQuestion,\n          nextQuestion,\n          previousQuestion,\n          numberofQuestions: questions.length,\n          answer,\n          previousRandomNumbers: []\n        }, () => {\n          _this.showOptions();\n\n          _this.handleDisableButton();\n        });\n      }\n    };\n\n    this.handleOptionClick = e => {\n      if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n        this.correctAnswer();\n      } else {\n        this.wrongAnswer();\n      }\n    };\n\n    this.correctAnswer = () => {\n      M.toast({\n        html: \"Točan odgovor\",\n        classes: \"toast-valid\",\n        displayLength: 1500\n      });\n      this.setState(prevState => ({\n        score: prevState.score + 1,\n        correctAnswers: prevState.correctAnswers + 1,\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        numberofAnsweredQuestions: prevState.numberofAnsweredQuestions + 1\n      }), () => {\n        if (this.state.nextQuestion === undefined) {\n          this.endGame();\n        } else {\n          this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        }\n      });\n    };\n\n    this.wrongAnswer = () => {\n      navigator.vibrate(1000);\n      M.toast({\n        html: \"Netočan odgovor\",\n        classes: \"toast-invalid\",\n        displayLength: 1500\n      });\n      this.setState(prevState => ({\n        wrongAnswers: prevState.wrongAnswers + 1,\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\n        numberofAnsweredQuestions: prevState.numberofAnsweredQuestions + 1\n      }), () => {\n        if (this.state.nextQuestion === undefined) {\n          this.endGame();\n        } else {\n          this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        }\n      });\n    };\n\n    this.handleNextButtonClick = () => {\n      if (this.state.nextQuestion !== undefined) {\n        this.setState(prevState => ({\n          currentQuestionIndex: prevState.currentQuestionIndex + 1\n        }), () => {\n          this.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n        });\n      }\n    };\n\n    this.handleQuitButtonClick = () => {\n      if (window.confirm(\"Jeste li sigurni?\")) {\n        this.props.history.push(\"/home\");\n      }\n    };\n\n    this.handleButtonClick = e => {\n      switch (e.target.id) {\n        case \"next-button\":\n          this.handleNextButtonClick();\n          break;\n\n        case \"previous-button\":\n          this.handlePreviousButtonClick();\n          break;\n\n        case \"quit-button\":\n          this.handleQuitButtonClick();\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.showOptions = () => {\n      const options = Array.from(document.querySelectorAll(\".option\"));\n      options.forEach(option => {\n        option.style.visibility = \"visible\";\n      });\n    };\n\n    this.handleHints = () => {\n      if (this.state.hints > 0) {\n        const options = Array.from(document.querySelectorAll(\".option\"));\n        let indexOfAnswer;\n        options.forEach((option, index) => {\n          if (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n            indexOfAnswer = index;\n          }\n        });\n\n        while (true) {\n          const randomNumber = Math.round(Math.random() * 3);\n\n          if (randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\n            options.forEach((option, index) => {\n              if (index === randomNumber) {\n                option.style.visibility = \"hidden\";\n                this.setState(prevState => ({\n                  hints: prevState.hints - 1,\n                  previousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\n                }));\n              }\n            });\n            break;\n          }\n\n          if (this.state.previousRandomNumbers.length >= 3) break;\n        }\n      }\n    };\n\n    this.startTimer = () => {\n      const countDownTime = Date.now() + 90000;\n      this.interval = setInterval(() => {\n        const now = new Date();\n        const distance = countDownTime - now;\n        const minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        const seconds = Math.floor(distance % (1000 * 60) / 1000);\n\n        if (distance < 0) {\n          clearInterval(this.interval);\n          this.setState({\n            time: {\n              minutes: 0,\n              seconds: 0\n            }\n          }, () => {\n            this.endGame();\n          });\n        } else {\n          this.setState({\n            time: {\n              minutes,\n              seconds\n            }\n          });\n        }\n      }, 1000);\n    };\n\n    this.handleDisableButton = () => {\n      if (this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\n        this.setState({\n          previousButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          previousButtonDisabled: false\n        });\n      }\n\n      if (this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberofQuestions) {\n        this.setState({\n          nextButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          nextButtonDisabled: false\n        });\n      }\n    };\n\n    this.endGame = () => {\n      alert(\"Kviz je završio!\");\n      const {\n        state\n      } = this;\n      const playerStats = {\n        score: state.score,\n        numberofQuestions: state.numberofQuestions,\n        numberofAnsweredQuestions: state.numberofAnsweredQuestions,\n        correctAnswers: state.correctAnswers,\n        wrongAnswers: state.wrongAnswers,\n        hintsUsed: 3 - state.hints\n      };\n      setTimeout(() => {\n        this.props.history.push(\"/home/play/summary\", playerStats);\n      }, 1000);\n    };\n\n    this.state = {\n      questions,\n      currentQuestion: {},\n      nextQuestion: {},\n      previousQuestion: {},\n      answer: \"\",\n      image,\n      numberofQuestions: 0,\n      numberofAnsweredQuestions: 0,\n      currentQuestionIndex: 0,\n      score: 0,\n      correctAnswers: 0,\n      wrongAnswers: 0,\n      hints: 3,\n      nextButtonDisabled: false,\n      previousButtonDisabled: true,\n      previousRandomNumbers: [],\n      time: {}\n    };\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    const {\n      questions,\n      currentQuestion,\n      nextQuestion,\n      previousQuestion\n    } = this.state;\n    this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\n    this.startTimer();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      currentQuestion,\n      currentQuestionIndex,\n      numberofQuestions,\n      time\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"playquiz\",\n        children: [/*#__PURE__*/_jsxDEV(Helmet, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Kviz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questions\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"OSNOVE PROGRAMIRANJA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"left\",\n                children: [currentQuestionIndex + 1, \"/\", numberofQuestions]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"right\",\n                children: [time.minutes, \":\", time.seconds]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mdi mdi-clock-outline mdi-24px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: currentQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: image.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"button-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: classnames(\"\", {\n                disable: this.state.nextButtonDisabled\n              }),\n              id: \"next-button\",\n              onClick: this.handleButtonClick,\n              children: \"Sljede\\u0107e\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"quit-button\",\n              onClick: this.handleButtonClick,\n              children: \"Iza\\u0111i\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MedPlay;","map":{"version":3,"names":["React","Component","Fragment","Helmet","M","questions","isEmpty","classnames","imageListClasses","MedPlay","constructor","props","displayQuestions","state","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","answer","setState","numberofQuestions","length","previousRandomNumbers","showOptions","handleDisableButton","handleOptionClick","e","target","innerHTML","toLowerCase","correctAnswer","wrongAnswer","toast","html","classes","displayLength","prevState","score","correctAnswers","numberofAnsweredQuestions","undefined","endGame","navigator","vibrate","wrongAnswers","handleNextButtonClick","handleQuitButtonClick","window","confirm","history","push","handleButtonClick","id","handlePreviousButtonClick","options","Array","from","document","querySelectorAll","forEach","option","style","visibility","handleHints","hints","indexOfAnswer","index","randomNumber","Math","round","random","includes","concat","startTimer","countDownTime","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","previousButtonDisabled","nextButtonDisabled","alert","playerStats","hintsUsed","setTimeout","image","componentDidMount","componentWillUnmount","render","question","icon","disable"],"sources":["C:/Users/Korisnik/Desktop/myquiz/src/components/quiz/Med.js"],"sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport M from \"materialize-css\";\r\nimport questions from \"../../questionmed.json\";\r\nimport isEmpty from \"../../utils/is-empty\";\r\nimport classnames from \"classnames\";\r\nimport { imageListClasses } from \"@mui/material\";\r\n\r\nclass MedPlay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions,\r\n      currentQuestion: {},\r\n      nextQuestion: {},\r\n      previousQuestion: {},\r\n      answer: \"\",\r\n      image,\r\n      numberofQuestions: 0,\r\n      numberofAnsweredQuestions: 0,\r\n      currentQuestionIndex: 0,\r\n      score: 0,\r\n      correctAnswers: 0,\r\n      wrongAnswers: 0,\r\n      hints: 3,\r\n      nextButtonDisabled: false,\r\n      previousButtonDisabled: true,\r\n\r\n      previousRandomNumbers: [],\r\n      time: {},\r\n    };\r\n    this.interval = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { questions, currentQuestion, nextQuestion, previousQuestion } =\r\n      this.state;\r\n    this.displayQuestions(\r\n      questions,\r\n      currentQuestion,\r\n      nextQuestion,\r\n      previousQuestion\r\n    );\r\n    this.startTimer();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  displayQuestions = (\r\n    questions = this.state.questions,\r\n    currentQuestion,\r\n    nextQuestion,\r\n    previousQuestion\r\n  ) => {\r\n    let { currentQuestionIndex } = this.state;\r\n    if (!isEmpty(this.state.questions)) {\r\n      questions = this.state.questions;\r\n      currentQuestion = questions[currentQuestionIndex];\r\n      nextQuestion = questions[currentQuestionIndex + 1];\r\n      previousQuestion = questions[currentQuestionIndex - 1];\r\n      const answer = currentQuestion.answer;\r\n      this.setState(\r\n        {\r\n          currentQuestion,\r\n          nextQuestion,\r\n          previousQuestion,\r\n          numberofQuestions: questions.length,\r\n          answer,\r\n          previousRandomNumbers: [],\r\n        },\r\n        () => {\r\n          this.showOptions();\r\n          this.handleDisableButton();\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleOptionClick = (e) => {\r\n    if (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n      this.correctAnswer();\r\n    } else {\r\n      this.wrongAnswer();\r\n    }\r\n  };\r\n\r\n  correctAnswer = () => {\r\n    M.toast({\r\n      html: \"Točan odgovor\",\r\n      classes: \"toast-valid\",\r\n      displayLength: 1500,\r\n    });\r\n    this.setState(\r\n      (prevState) => ({\r\n        score: prevState.score + 1,\r\n        correctAnswers: prevState.correctAnswers + 1,\r\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n        numberofAnsweredQuestions: prevState.numberofAnsweredQuestions + 1,\r\n      }),\r\n      () => {\r\n        if (this.state.nextQuestion === undefined) {\r\n          this.endGame();\r\n        } else {\r\n          this.displayQuestions(\r\n            this.state.questions,\r\n            this.state.currentQuestion,\r\n            this.state.nextQuestion,\r\n            this.state.previousQuestion\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  wrongAnswer = () => {\r\n    navigator.vibrate(1000);\r\n    M.toast({\r\n      html: \"Netočan odgovor\",\r\n      classes: \"toast-invalid\",\r\n      displayLength: 1500,\r\n    });\r\n    this.setState(\r\n      (prevState) => ({\r\n        wrongAnswers: prevState.wrongAnswers + 1,\r\n        currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n        numberofAnsweredQuestions: prevState.numberofAnsweredQuestions + 1,\r\n      }),\r\n      () => {\r\n        if (this.state.nextQuestion === undefined) {\r\n          this.endGame();\r\n        } else {\r\n          this.displayQuestions(\r\n            this.state.questions,\r\n            this.state.currentQuestion,\r\n            this.state.nextQuestion,\r\n            this.state.previousQuestion\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  handleNextButtonClick = () => {\r\n    if (this.state.nextQuestion !== undefined) {\r\n      this.setState(\r\n        (prevState) => ({\r\n          currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n        }),\r\n        () => {\r\n          this.displayQuestions(\r\n            this.state.state,\r\n            this.state.currentQuestion,\r\n            this.state.nextQuestion,\r\n            this.state.previousQuestion\r\n          );\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  handleQuitButtonClick = () => {\r\n    if (window.confirm(\"Jeste li sigurni?\")) {\r\n      this.props.history.push(\"/home\");\r\n    }\r\n  };\r\n\r\n  handleButtonClick = (e) => {\r\n    switch (e.target.id) {\r\n      case \"next-button\":\r\n        this.handleNextButtonClick();\r\n        break;\r\n      case \"previous-button\":\r\n        this.handlePreviousButtonClick();\r\n        break;\r\n      case \"quit-button\":\r\n        this.handleQuitButtonClick();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  showOptions = () => {\r\n    const options = Array.from(document.querySelectorAll(\".option\"));\r\n\r\n    options.forEach((option) => {\r\n      option.style.visibility = \"visible\";\r\n    });\r\n  };\r\n\r\n  handleHints = () => {\r\n    if (this.state.hints > 0) {\r\n      const options = Array.from(document.querySelectorAll(\".option\"));\r\n      let indexOfAnswer;\r\n\r\n      options.forEach((option, index) => {\r\n        if (\r\n          option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()\r\n        ) {\r\n          indexOfAnswer = index;\r\n        }\r\n      });\r\n\r\n      while (true) {\r\n        const randomNumber = Math.round(Math.random() * 3);\r\n        if (\r\n          randomNumber !== indexOfAnswer &&\r\n          !this.state.previousRandomNumbers.includes(randomNumber)\r\n        ) {\r\n          options.forEach((option, index) => {\r\n            if (index === randomNumber) {\r\n              option.style.visibility = \"hidden\";\r\n              this.setState((prevState) => ({\r\n                hints: prevState.hints - 1,\r\n                previousRandomNumbers:\r\n                  prevState.previousRandomNumbers.concat(randomNumber),\r\n              }));\r\n            }\r\n          });\r\n          break;\r\n        }\r\n        if (this.state.previousRandomNumbers.length >= 3) break;\r\n      }\r\n    }\r\n  };\r\n\r\n  startTimer = () => {\r\n    const countDownTime = Date.now() + 90000;\r\n    this.interval = setInterval(() => {\r\n      const now = new Date();\r\n      const distance = countDownTime - now;\r\n\r\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n      if (distance < 0) {\r\n        clearInterval(this.interval);\r\n        this.setState(\r\n          {\r\n            time: {\r\n              minutes: 0,\r\n              seconds: 0,\r\n            },\r\n          },\r\n          () => {\r\n            this.endGame();\r\n          }\r\n        );\r\n      } else {\r\n        this.setState({\r\n          time: {\r\n            minutes,\r\n            seconds,\r\n          },\r\n        });\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  handleDisableButton = () => {\r\n    if (\r\n      this.state.previousQuestion === undefined ||\r\n      this.state.currentQuestionIndex === 0\r\n    ) {\r\n      this.setState({\r\n        previousButtonDisabled: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        previousButtonDisabled: false,\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.state.nextQuestion === undefined ||\r\n      this.state.currentQuestionIndex + 1 === this.state.numberofQuestions\r\n    ) {\r\n      this.setState({\r\n        nextButtonDisabled: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        nextButtonDisabled: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  endGame = () => {\r\n    alert(\"Kviz je završio!\");\r\n    const { state } = this;\r\n    const playerStats = {\r\n      score: state.score,\r\n      numberofQuestions: state.numberofQuestions,\r\n      numberofAnsweredQuestions: state.numberofAnsweredQuestions,\r\n      correctAnswers: state.correctAnswers,\r\n      wrongAnswers: state.wrongAnswers,\r\n      hintsUsed: 3 - state.hints,\r\n    };\r\n    setTimeout(() => {\r\n      this.props.history.push(\"/home/play/summary\", playerStats);\r\n    }, 1000);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currentQuestion,\r\n      currentQuestionIndex,\r\n\r\n      numberofQuestions,\r\n      time,\r\n    } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <div id=\"playquiz\">\r\n          <Helmet>\r\n            <title>Kviz</title>\r\n          </Helmet>\r\n          <div className=\"questions\">\r\n            <h2>OSNOVE PROGRAMIRANJA</h2>\r\n\r\n            <div>\r\n              <p>\r\n                <span className=\"left\">\r\n                  {currentQuestionIndex + 1}/{numberofQuestions}\r\n                </span>\r\n                <span className=\"right\">\r\n                  {time.minutes}:{time.seconds}\r\n                </span>\r\n                <span className=\"mdi mdi-clock-outline mdi-24px\"></span>\r\n              </p>\r\n            </div>\r\n            <h5>{currentQuestion.question}</h5>\r\n            <div>{<img src={image.icon}></img>}</div>\r\n\r\n            <div className=\"button-container\">\r\n              <button\r\n                className={classnames(\"\", {\r\n                  disable: this.state.nextButtonDisabled,\r\n                })}\r\n                id=\"next-button\"\r\n                onClick={this.handleButtonClick}\r\n              >\r\n                Sljedeće\r\n              </button>\r\n              <button id=\"quit-button\" onClick={this.handleButtonClick}>\r\n                Izađi\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MedPlay;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}